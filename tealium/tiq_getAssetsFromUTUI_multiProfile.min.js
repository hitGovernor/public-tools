let allTiQAssets=[],results={profiles:0,tag:0,loadrule:0,extension:0,datalayer:0},tiqHelper={getId:function(type,asset){try{return asset._id||asset.id||""}catch(err){return""}},getName:function(type,asset){try{let retval="datalayer"===type?asset.name:asset.title;return retval=retval.replace(/[,\t]/g," "),retval}catch(err){return""}},getType:function(type,asset){try{let retval="";return"datalayer"===type?retval=asset.type:"tag"===type?(retval=asset.tag_name,retval+=asset.config_tagtype?" - "+asset.config_tagtype:""):"extension"===type&&(retval=asset.extType),retval}catch(err){return""}},getStatus:function(type,asset){try{return asset.status||""}catch(err){return""}},getPublishTargets:function(type,asset){try{let retval={last_modified:asset.publish_revisions.last_modified};return Object.assign(retval,asset.publish_revisions.svr_save_timestamps),retval}catch(err){return{}}},getLastPublishDetail:function(payload,pub_date){try{let retval={},obj=payload.publish_history[pub_date][pub_date];return retval.notes=this.decodeHTMLEntities(obj.notes),retval.operator=obj.operator,retval}catch(err){return{}}},getLastModified:function(type,asset){try{return asset.publish_revisions.last_modified}catch(err){return""}},addToDataList:function(ary,key){return ary.includes(key)||ary.push(key),ary},getMappedVars:function(type,asset){let output=[];if("tag"===type)for(let mapped in asset.map)output.push(asset.map[mapped].type+"."+asset.map[mapped].key);else if("extension"===type)for(let key in asset)/_source$/.test(key)&&this.addToDataList(output,asset[key]),"Set Data Values"===asset.extType?/_set$/.test(key)&&this.addToDataList(output,asset[key]):"Lookup Table"===asset.extType?"var"!==key&&"varlookup"!==key||this.addToDataList(output,asset[key]):"Join Data Values"===asset.extType?(/_set$/.test(key)||"var"===key)&&this.addToDataList(output,asset[key]):"Persist Data Value"===asset.extType&&("var"!==key&&"settovar"!==key||this.addToDataList(output,asset[key]));else if("loadrule"===type)for(let key in asset)if("object"==typeof asset[key])for(let subkey in asset[key])/^input_/.test(subkey)&&this.addToDataList(output,asset[key][subkey]);return output.join("|")},getLoadRuleTagCount:function(type,asset){return"loadrule"===type?utui.loadrules.getTagsScopedCount(asset)||{}:{active:"",inactive:"",total:""}},getLoadRulesForTags:function(type,asset){return"tag"===type?asset.loadrule.replaceAll(",","|"):""},getExtensionScope:function(type,asset){return"extension"===type?asset.scope.replaceAll(",","|"):""},getLabels:function(type,asset){try{let retval=[];return asset.labels&&asset.labels.split(",").forEach((function(item){retval.push(utui.data.labels[item].name)})),asset.imported&&retval.push(asset.imported),retval.join("|")}catch(err){return""}},getParentLibrary:function(asset){try{return asset.settings.profileid}catch(err){return""}},decodeHTMLEntities:function(str){let txt=document.createElement("textarea");return txt.innerHTML=str,txt.value},convertToCSV:function(assets){let allBody=[],headers=[];headers=Object.keys(assets[0]).join(",")+"\n";for(let item in assets){let tmp=assets[item],tmpArray=[];for(let key in tmp)tmpArray.push(tmp[key]);allBody.push(tmpArray.join(","))}return headers+allBody.join("\n")},download:function(data,tiq_account){const blob=new Blob([data],{type:"text/csv"}),url=window.URL.createObjectURL(blob),a=document.createElement("a");a.setAttribute("href",url),a.setAttribute("download","tiq-inventory-"+tiq_account+".csv"),a.click()},getAllAssets:function(payload){let ACCOUNT=payload.account||payload.settings.account,PROFILE=payload.profile||payload.settings.profileid,assetTypesToRetrieve=["tag","extension","loadrule","datalayer"],retval=[],assetSources={tag:payload.manage,extension:payload.customizations,loadrule:payload.loadrules,datalayer:payload.define};return assetTypesToRetrieve.forEach((function(assetType){let assets=assetSources[assetType];for(let key in assets){results[assetType]++;let tmp={},loadRuleTagCounts=tiqHelper.getLoadRuleTagCount(assetType,assets[key]),publishTargetsAndDates=tiqHelper.getPublishTargets(assetType,assets[key]),lastProdPublishDetails=tiqHelper.getLastPublishDetail(payload,publishTargetsAndDates.prod);tmp.account=ACCOUNT,tmp.profile=PROFILE,tmp.parentLibrary=tiqHelper.getParentLibrary(assets[key]),tmp.assetType=assetType,tmp.id=tiqHelper.getId(assetType,assets[key]),tmp.name=tiqHelper.getName(assetType,assets[key]),tmp.lastModified=publishTargetsAndDates.last_modified||"unpublished",tmp.lastDevPubDate=publishTargetsAndDates.dev||"unpublished",tmp.lastQAPubDate=publishTargetsAndDates.qa||"unpublished",tmp.lastProdPubDate=publishTargetsAndDates.prod||"unpublished",tmp.lastProdPubUser=lastProdPublishDetails.operator||"",tmp.lastProdPubNotes=lastProdPublishDetails.notes||"",tmp.type=tiqHelper.getType(assetType,assets[key]),tmp.status=tiqHelper.getStatus(assetType,assets[key]),tmp.labels=tiqHelper.getLabels(assetType,assets[key]),tmp.mappedVars=tiqHelper.getMappedVars(assetType,assets[key]),tmp.loadRuleTagsActive=loadRuleTagCounts.active,tmp.loadRuleTagsInactive=loadRuleTagCounts.inactive,tmp.tagLoadRules=tiqHelper.getLoadRulesForTags(assetType,assets[key]),tmp.extensionScope=tiqHelper.getExtensionScope(assetType,assets[key]),allTiQAssets.push(tmp),retval.push(tmp)}})),retval}};utui.automator.getAllProfiles(utui.login.account).then((function(profiles){profiles.forEach((function(profile){utui.profile.getProfile(null,{r:"getProfile",account:utui.login.account,profile:profile},(function(data){tiqHelper.getAllAssets(data),results.profiles++,console.log("TIQ_AUDIT: PROCESSING",results.profiles,"of",profiles.length,data.profile,data),results.profiles>=profiles.length&&(console.log("TIQ_AUDIT: DONE",results.profiles,"of",profiles.length,results,allTiQAssets),tiqHelper.download(tiqHelper.convertToCSV(allTiQAssets),utui.login.account))}))}))})).catch((function(err){console.log(err)}));