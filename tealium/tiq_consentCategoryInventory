let PROFILE_OVERRIDE = [];

let csv = "profile,consent_type,category,real_category,tag_uid,title,status,tag_template,template_id";
let output = [];

utui.automator.getAllProfiles(utui.login.account).then(function (profiles) {
  let PROFILES = (PROFILE_OVERRIDE.length > 0) ? PROFILE_OVERRIDE : profiles.sort();
  let TAG_COUNT = 0;
  let CONSENT_TAG_COUNT = 0;
  let PROFILE_COUNT = 0;
  let PROCESSED_PROFILES = 0;
  let CAT_LOOKUP = {
    "Affiliates": "functional",
    "Analytics": "advertising",
    "Display Ad": "performance",
    "Misc": "essential",
    "Personalization": "advertising"
  }

  PROFILES.forEach(function (profile, idx) {
    idx++;
    console.log("retrieve", idx, "of", PROFILES.length, "-", profile);

    utui.profile.getProfile(null, {
      r: "getProfile",
      account: utui.login.account,
      profile: profile
    }, function (data, error) {
      if (error) {
        console.error(`Error processing profile ${profile}:`, error);
      }
      PROFILE_COUNT++;
      console.log(`Processing profile: ${data.profile} (${Object.keys(data.manage || {}).length} tags available)`);
      // console.log(data);

      // Always increment processed profiles, even if there's an error
      PROCESSED_PROFILES++;
      console.log(`â®‘ ${PROCESSED_PROFILES} of ${PROFILES.length} profiles processed - Profile: ${profile}`);

      if (data.profile) {
        let consentType = "";
        if (data.privacy_management) {
          if (data?.privacy_management?.doNotSell?.isEnabled == "true") {
            consentType = "ccpa"; // tiq's opt-out model
          } else if (data?.privacy_management?.preferences?.isEnabled == "true") {
            consentType = "gdpr"; // tiq's opt-in model
          }
        }

        for (tag in data.manage) {
          TAG_COUNT++
          let tmpTag = data.manage[tag];
          // console.log(tmpTag);
          let tagInfo = {
            consent_type: consentType,
            uid: tmpTag.id,
            template_id: tmpTag.tag_id,
            template_name: tmpTag.tag_name,
            tag_name: tmpTag.title,
            status: tmpTag.status,
          }

          if (consentType != "") {
            let CONSENTPATH = (consentType === "ccpa") ? "doNotSell" : "preferences";

            for (category in data.privacy_management[CONSENTPATH].categories) {
              let cat = data.privacy_management[CONSENTPATH].categories[category];
              if (Object.keys(cat.tagid || {}).length > 0) {
                for (tag in cat.tagid) {
                  if (cat.tagid[tag].id && cat.tagid[tag].id == tagInfo.uid) {
                    CONSENT_TAG_COUNT++;
                    tagInfo.category = cat.name;
                    tagInfo.real_category = CAT_LOOKUP[cat.name] || cat.name;
                    tagInfo.matchType = "TAG_ID";
                  } else if (!cat.tagid[tag].id && cat.tagid[tag].tag_id && cat.tagid[tag].tag_id == tagInfo.template_id) {
                    CONSENT_TAG_COUNT++;
                    tagInfo.category = cat.name;
                    tagInfo.real_category = CAT_LOOKUP[cat.name] || cat.name;
                    tagInfo.matchType = "TEMPLATE_ID";
                  }
                }
              }
            }
          }
          output.push(tagInfo);

          csv += "\n" + [
            `"${data.profile}"`,
            `"${consentType}"`,
            `"${tagInfo.category}"`,
            `"${tagInfo.real_category}"`,
            `"${tagInfo.uid}"`,
            `"${tagInfo.tag_name}"`,
            `"${tagInfo.status}"`,
            `"${tagInfo.template_name}"`,
            `"${tagInfo.template_id}"`
          ].join(",");
        }
      }

      // Check if all profiles have been processed (moved outside the if block)
      if (PROCESSED_PROFILES >= PROFILES.length) {
        downloadCSV();
      }
    });
  });

  // Add a timeout to force download if some profiles don't respond
  setTimeout(function () {
    if (PROCESSED_PROFILES < PROFILES.length) {
      console.warn(`â§° Timeout reached. Only ${PROCESSED_PROFILES} of ${PROFILES.length} profiles processed. Downloading partial results...`);
      downloadCSV();
    }
  }, 30000); // 30 second timeout

  // Function to download consolidated CSV file
  function downloadCSV() {
    console.log(`\nProcessing complete! Total tags: ${TAG_COUNT} | Consent tags: ${CONSENT_TAG_COUNT}`);
    // console.table(output);

    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `tealium_tag_audit_${new Date().toISOString().slice(0, 10)}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    console.log(`\nðŸ’¾ CSV file downloaded: tealium_tag_audit_${utui.login.account}_consolidated_${new Date().toISOString().slice(0, 10)}.csv`);

    // // Display CSV content in console for copy/paste
    // console.log("\n--- CSV Content ---");
    // console.log(csv);
  }
})