var tiqHelper={getId:function(type,asset){try{return asset._id||asset.id||""}catch(err){return""}},getName:function(type,asset){try{var retval;return"datalayer"===type?asset.name:asset.title}catch(err){return""}},getType:function(type,asset){try{var retval="";return"datalayer"===type?retval=asset.type:"tag"===type?(retval=asset.tag_name,retval+=asset.config_tagtype?" - "+asset.config_tagtype:""):"extension"===type&&(retval=asset.extType),retval}catch(err){return""}},getStatus:function(type,asset){try{return asset.status||""}catch(err){return""}},getPublishRevisions:function(type,asset){try{return Object.keys(asset.publish_revisions.svr_save_timestamps).sort()}catch(err){return""}},getLastModified:function(type,asset){try{return asset.publish_revisions.last_modified}catch(err){return""}},addToDataList:function(ary,key){return ary.includes(key)||ary.push(key),ary},getMappedVars:function(type,asset){var output=[];if("tag"===type)for(var mapped in asset.map)output.push(asset.map[mapped].type+"."+asset.map[mapped].key);else if("extension"===type)for(var key in asset)/_source$/.test(key)&&this.addToDataList(output,asset[key]),"Set Data Values"===asset.extType?/_set$/.test(key)&&this.addToDataList(output,asset[key]):"Lookup Table"===asset.extType?"var"!==key&&"varlookup"!==key||this.addToDataList(output,asset[key]):"Join Data Values"===asset.extType?(/_set$/.test(key)||"var"===key)&&this.addToDataList(output,asset[key]):"Persist Data Value"===asset.extType&&("var"!==key&&"settovar"!==key||this.addToDataList(output,asset[key]));else if("loadrule"===type)for(var key in asset)if("object"==typeof asset[key])for(var subkey in asset[key])/^input_/.test(subkey)&&this.addToDataList(output,asset[key][subkey]);return output},getLoadRulesForTags:function(type,asset){return"tag"===type?asset.loadrule.split(","):[]},getExtensionScope:function(type,asset){return"extension"===type?asset.scope.split(","):[]},getLabels:function(type,asset){try{var retval=[];return asset.labels&&asset.labels.split(",").forEach((function(item){retval.push(utui.data.labels[item].name)})),asset.imported&&retval.push(asset.imported),retval}catch(err){return[]}},convertToCSV:function(assets){var allBody=[],headers=[];for(var key in assets[0])headers.push(key);for(var item in headers=headers.join(",")+"\n",assets){var tmp=assets[item],tmpArray=[];for(var key in tmp)tmpArray.push(tmp[key]);allBody.push(tmpArray.join(","))}return headers+allBody.join("\n")},getAllAssets:function(){var retval;return this.getAssetsByType("tag","extension","loadrule","datalayer")},getAssetsByType:function(){var tagsToGet=Array.from(arguments),retval=[],assetSources={tag:utui.data.manage,extension:utui.data.customizations,loadrule:utui.data.loadrules,datalayer:utui.data.define};return tagsToGet.forEach((function(item){var assets=assetSources[item];for(var key in assets){var tmp={};tmp.assetType=item,tmp.id=tiqHelper.getId(item,assets[key]),tmp.name=tiqHelper.getName(item,assets[key]),tmp.publishedTargets=tiqHelper.getPublishRevisions(item,assets[key]),tmp.type=tiqHelper.getType(item,assets[key]),tmp.status=tiqHelper.getStatus(item,assets[key]),tmp.labels=tiqHelper.getLabels(item,assets[key]),tmp.mappedVars=tiqHelper.getMappedVars(item,assets[key]),tmp.tagLoadRules=tiqHelper.getLoadRulesForTags(item,assets[key]),tmp.extensionScope=tiqHelper.getExtensionScope(item,assets[key]),tmp.lastModified=tiqHelper.getLastModified(item,assets[key]),retval.push(tmp)}})),retval}},myTiQAssets=tiqHelper.getAllAssets(),userInput=prompt("Sepcify your preferred format:\n\n* table: Displays assets using console.table()\n* csv: Displays assets as a comma-delimited string\n\nNote: Make sure you are in TiQ, with the Data Layer tab selected.","table","csv");/^csv$/i.test(userInput)?console.log(tiqHelper.convertToCSV(myTiQAssets)):/^table$/i.test(userInput)?console.table(myTiQAssets):console.log('tiqHelper: Invalid input. Please specify "csv" or "table".');